#!/usr/bin/env perl
use common::sense;
use Rhetoric 'With::MockRequest';
use Getopt::Long;
use Data::Dump 'pp';
use File::Path::Tiny;
use File::Basename;

# default value for output_dir
$_{output} = "output";

Getopt::Long::Configure('no_ignore_case');
GetOptions(
  \%_,
  'help|h',
  'relocate|r=s',
  'config|c=s%',
  'output|o=s',
);

if ($_{help}) {
  require Pod::Usage;
  Pod::Usage->import;
  pod2usage(-verbose => 1);
}

# mkpath
*mk = \&File::Path::Tiny::mk;

do 'rhetoric.psgi';

my $C = \%Rhetoric::CONFIG;
for (keys %{$_{config}}) {
  if (/\[/ || /\{/) {
    my $key = $_;
    eval '$C->'.$key.' = $_{config}'."{'$key'}";
  } else {
    $C->{$_} = $_{config}{$_}
  }
}
pp $C;

Rhetoric->relocate($_{relocate}) if ($_{relocate});
Rhetoric->init;

package Rhetoric::Controllers;
use IO::All;
use File::Basename;

*mk = \&File::Path::Tiny::mk;

my $output_dir = $_{output};
mkdir($output_dir);

my %replacement = (
  Home     => [ '/index.html', '/page/(\d+).html' ],
  Post     => [ '/(\d+)/(\d+)/([\w-]+).html' ],
  Category => [ '/category/(\w+).html' ],
  Archive  => [ '/archive/(\d+)/(\d+).html' ],
  Page     => [ '/(.*).html' ],
  Feed     => [ '/feed.xml' ],
);

while (my ($controller, $urls) = each(%replacement)) {
  $Rhetoric::Controllers::C{$controller}->{urls} = $urls;
}
#pp \%Rhetoric::Controllers::C;

# export pages for Home controller
my ($cc, $content) = Rhetoric->get('Home');
my $blog = $cc->env->storage;
my ($posts, $pager) = $blog->posts($C->{posts_per_page}, 1);
my $last_page = $pager->last_page;
$content > io($output_dir . R('Home'));
mk("$output_dir/page");
if ($last_page > 1) {
  for my $page (2 .. $last_page) {
    my ($cc, $content) = Rhetoric->get('Home', $page);
    $content > io($output_dir . R('Home', $page));
  }
}

# export file for Feed controller
my ($cc, $content) = Rhetoric->get('Feed');
$content > io($output_dir . R('Feed'));

# export pages for Post controller
($posts, $pager) = $blog->posts(2 ** 31, 1);
for my $post (@$posts) {
  my ($cc, $content) = Rhetoric->get('Post', $post->year, $post->month, $post->slug);
  mk(sprintf("$output_dir/%d/%02d", $post->year, $post->month));
  $content > io($output_dir . R('Post', $post->year, $post->month, $post->slug));
}

# export pages for Page controller
my (@pages) = $blog->pages;
for my $page (@pages) {
  my ($cc, $content) = Rhetoric->get('Page', $page);
  my $dir_name = dirname($output_dir . R('Page', $page));
  mk($dir_name);
  $content > io($output_dir . R('Page', $page));
}

# export pages for Archive controller
my (@archives) = $blog->archives;
for my $archive (@archives) {
  my ($cc, $content) = Rhetoric->get('Archive', $archive->year, $archive->month);
  my $dir_name = dirname($output_dir . R('Archive', $archive->year, $archive->month));
  mk($dir_name);
  $content > io($output_dir . R('Archive', $archive->year, $archive->month));
}

# export pages for Category controller
my (@categories) = $blog->categories;
for my $category (@categories) {
  my ($cc, $content) = Rhetoric->get('Category', $category);
  my $dir_name = dirname($output_dir . R('Category', $category));
  mk($dir_name);
  $content > io($output_dir . R('Category', $category));
}

# export static files for themes
system("rsync -a '$C->{'theme.base'}/' '$output_dir/theme/'");

# tar it up
system("tar czvf output.tgz output/") if ($C->{tar});

__END__

=head1 NAME

rh-export - create a static export of a Rhetoric blog

=head1 SYNOPSIS

Create a static export of a Rhetoric blog

  cd /var/www/blog.mydomain.com
  rh export

  cd output
  ls -R

=head1 DESCRIPTION

=head1 OPTIONS

=over 4

=item --help, -h

Display a help message

=item --relocate=REQUEST_PATH, -r

If the static blog needs to live someplace other than '/',
use this option to allow the blog to be served from another path.

  rh export --relocate=/blog

=item --config KEY=VALUE, -c

This option lets you override certain values in %Rhetoric::CONFIG.
You can repeat C<--config> as many times as you like on the command line
to set more than one config variable.

  rh export --config foo=1 --config bar=2

=item --output=DIR, -o

Set the directory to output the static files to.  It defaults to F<output>.

  rh export --output=/var/www/static.mydomain.com

=back

=head1 SEE ALSO

L<rh>

=cut

# Local Variables: ***
# mode: cperl ***
# indent-tabs-mode: nil ***
# cperl-close-paren-offset: -2 ***
# cperl-continued-statement-offset: 2 ***
# cperl-indent-level: 2 ***
# cperl-indent-parens-as-block: t ***
# cperl-tab-always-indent: nil ***
# End: ***
# vim:tabstop=2 softtabstop=2 shiftwidth=2 shiftround expandtab
