#!/usr/bin/env perl
use common::sense;
use Eval::WithLexicals;
use Term::ReadLine;
use Rhetoric 'With::MockRequest';
use Try::Tiny;
use Data::Dump qw(pp dumpf);

use Getopt::Long;
Getopt::Long::Configure('no_ignore_case');
GetOptions(
  \%_,
  'help|h',
);

if ($_{help}) {
  require Pod::Usage;
  Pod::Usage->import;
  pod2usage(-verbose => 1);
}

# I would like to have some common code that finds
# rhetoric.psgi in the current directory tree
# traversing upward if necessary.
# like git
my $app = do 'rhetoric.psgi';
my $storage = Rhetoric::storage($Rhetoric::CONFIG{storage});
my $title = $storage->meta('title');

my $eval = Eval::WithLexicals->new(
  in_package => 'Rhetoric::Controllers',
);
my $prelude = q{
  our @C;
  our %C;
  our @V;
  our %V;
  *V = *Rhetoric::Views::V;
  our %CONFIG;
  *CONFIG = \%Rhetoric::CONFIG;
  my $blog = Rhetoric::storage( $CONFIG{storage} );
};
$eval->eval($prelude);
my $term = Term::ReadLine->new('rh-console');
while (1) {
  my $line = $term->readline("$title> ");
  exit unless defined $line;
  my @ret;
  eval {
    @ret = $eval->eval($line);
    1;
  };
  if ($@) {
    @ret = ("Error!", $@);
  }
  say dumpf(@ret, sub {
    my ($ctx, $object) = @_;
    if ($ctx->object_isa('DateTime')) {
      return {
        dump => sprintf('DateTime->new(year => %d, month => %d, day => %d, hour => %d, minute => %d, second => %d)',
          $object->year, $object->month,  $object->day,
          $object->hour, $object->minute, $object->second
        ),
      };
    } else {
      return undef;
    }
  });
}

__END__

=head1 NAME

rh-console - a REPL for introspecting Rhetoric blogs

=head1 SYNOPSIS

Go to a directory containing F<rhetoric.psgi> and start rh-console

  cd /var/www/myblog.org
  rh console
  Rhetoric> $blog
  Rhetoric> \%CONFIG
  Rhetoric> \%C
  Rhetoric> \%V
  Rhetoric> exit

=head1 DESCRIPTION

This starts up a REPL (or console) that let's you interact with a Rhetoric
blog through it's various Perl APIs.

=head1 OPTIONS

=over 4

=item --help, -h

Display a help message.

=back

=head1 SEE ALSO

L<rh>, L<Rhetoric::Storage::File>

=cut

# Local Variables: ***
# mode: cperl ***
# indent-tabs-mode: nil ***
# cperl-close-paren-offset: -2 ***
# cperl-continued-statement-offset: 2 ***
# cperl-indent-level: 2 ***
# cperl-indent-parens-as-block: t ***
# cperl-tab-always-indent: nil ***
# End: ***
# vim:tabstop=2 softtabstop=2 shiftwidth=2 shiftround expandtab
